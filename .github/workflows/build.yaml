name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

#  jobs:
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     env:
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash
#         working-directory: ./20-eks

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v2

#     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         terraform_version: 1.0.1
#         terraform_wrapper: false
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       run: terraform init

#     # Checks that all Terraform configuration files adhere to a canonical format
#     - name: Terraform Validate
#       run: terraform validate

#     # Generates an execution plan for Terraform
#     - name: Terraform Plan
#       run: terraform plan 

#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       run: terraform apply -auto-approve
    
#     # # terraform destroy -auto-approve -input=false
#     # - name: Terraform Destroy
#     #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#     #   run: terraform destroy -auto-approve -input=false
  
#   # This step is to deploy the application to the EKS cluster
jobs:
  sock-shop-deploy:
    name: 
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./sock-shop


    steps:
    - name: Checkout code
      uses: actions/checkout@v3

  #   This step is to install the kubectl cli
    - name: Install kubectl
      uses: azure/setup-kubectl@v3.0
      with:
        version: 'v1.25.0' # default is latest stable
        install-metrics-apiserver: true      

  #   This step is to configure the AWS credentials with the secrets
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

  #   This step is to update the kubeconfig file with the cluster details
    - name: Update kube config
      run: aws eks update-kubeconfig --name alt-school --region us-east-1
      
    - name: Deploy sock-shop application to EKS cluster
      run: |
        kubectl apply -f manifests 
   
    - name: Deploy to EKS
      run: |
        kubectl apply -f manifests-monitoring
      
    - name: Deploy to monitoring to EKS cluster
      run: |
        kubectl apply -f manifests-alerting
     
    
    - name: Deploy logging manifests to the EKS cluster
      run: |
        kubectl apply -f manifests-logging
      

  simplewebapp:
    name: 
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
                  
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

  #   This step is to install the kubectl cli
    - name: Install kubectl
      uses: azure/setup-kubectl@v3.0
      with:
        version: 'v1.25.0' # default is latest stable
        install-metrics-apiserver: true      

  #   This step is to configure the AWS credentials with the secrets
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

  #   This step is to update the kubeconfig file with the cluster details
    - name: Update kube config
      run: aws eks update-kubeconfig --name alt-school --region us-east-1

    - name: Deploy  simplewebapp to EKS cluster
      run: |
        kubectl apply -f podinfoapp  